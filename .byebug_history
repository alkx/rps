exit
Announcer.read_score(game_move: game_move, scorekeeper: scorekeeper)
scorekeeper.update_score(player_move: player_move, game_move: game_move)
game_move = strategy.new(player: player).get_move
c
$stdin.gets.chomp
player_move = GameLogic.validate_move(input: $stdin.gets.chomp)
Announcer.start_game
exit
scorekeeper.instance_variable_get(:@player_won_count)
scorekeeper.instance_variable_get(:player_won_count)
scorekeeper.methods.sort
instance_variable_get(@player_won_count)
scorekeeper
scorekeeper.instance_variable_get(@player_won_count)
scorekeeper.instance_variable_get(player_won_count)
scorekeeper.instance_variable_get(@player_won_count)
scorekeeper
c
game_result = GameLogic.determine_winner(player_move: player_move, game_move: game_move)
exit
game_result = GameLogic.determine_winner(player_move: player_move, game_move: game_move)
exit
game_move
player_move
game_result = GameLogic.determine_winner(player_move: player_move, game_move: game_move)
exit
player_move.name
game_move.name
player_move.name
move_hierarchy[game_move.name].name
move_hierarchy[game_move.name].name == player_move.name
game_move.name
player_move.name
exit
game_move
player_move
c
move
move_hierarchy[move.name]
move
move === Rock.new
move == Rock.new
move
move_hierarchy[move]
move
exit
move_name
exit
grouped_moves.values.max_by(&:size).first
grouped_moves.values.max_by(&:size)
grouped_moves = player.moves.group_by(&:class)
player.moves.max
player.moves.group_by(&:class)
player.moves.group_by(&:iteself)
player.moves
c
player.moves.group_by(&:itself)
player.moves
player_moves
exit
game_move
player_move
player_move.name
move_hierarchy[game_move.name].name 
move_hierarchy[game_move.name].name == player_move.name
move_hierarchy[game_move.name] == player_move.name
player_move.name
move_hierarchy[game_move.name]
player_move.name == game_move.name
game_move.name
player_move.name
exit
grouped_moves.values.max_by(&:size).first
grouped_moves = player.moves.map(&:name).group_by(&:itself)
player.moves.map(&:name).group_by(&:itself)
player.moves.map(&:name).group_by(&:itself).values.max_by(&:size).first
player.moves.map(&:name).group_by(&:itself).values.max_by(&:size)
player.moves.map(&:name).group_by(&:itself).values
player.moves.map(&:name).group_by(&:itself)
player.moves.map(&:name).group_by(&:itself).values.max_by(&:size)
player.moves.group_by(&:itself).values.max_by(&:size)
player.moves.group_by(&:itself).values
player.moves.group_by(&:itself)
player.moves
names.group_by(&:to_s).values.max_by(&:size).uniq
names.group_by(&:to_s).values.max_by(&:size)
names.group_by(&:to_s).values
names.group_by(&:to_s)
names.group_by(&:to_sym)
names.group_by
names.group_by(&:to_s)
names = %w[ foo foo bar bar bar baz ]
foo.min
foo.max
foo
foo = [:rock, :rock, :paper, :paper, :paper].map(&:to_s)
[:rock, :rock, :paper, :paper, :paper].max
[:rock, :rock, :paper, :paper].max
player.moves.map(&:name).max
player.moves.map(&:name)
player.moves
player.moves.max
c
player.moves.max
player.moves
player.has_moves?
c
player.has_moves?
exit
player_move.name == :rock
player_move.name
player_move.name == game_move.name
game_move.name
player_move.name
player_move
exit
{ Paper.new: foo}
Paper
move_hierarchy[move.name]
move_hierarchy
move.name
move
exit
random_move
random_move.name
random_move
exit
random_move
c
player_move.name
player_move
exit
player_move
exit
player_move
exit
bazinga
bazinga = bazinga + 1
bazinga
exit
bazinga
basinga
bazinga += 1
bazinga
exit
bazinga
exit
last_game
player_won_count
exit
player_won_count
exit
player_won_count
exit
player_won_count
exit
tie_count
player_won_count  
player_won_count  += 1
player_won_count 
player_won_count = 0
player_won_count += 1
player_won_count
exit
last_game << 1
last_game
@player_won_count
player_won_count
exit
player_won_count
@player_won_count
player_won_count
last_game
player_won_count
exit
scorekeeper.last_game[0]
scorekeeper.last_game
scorekeeper.last_move
scorekeeper.last
exit
scorekeeper.last_game.first[:winner]
scorekeeper.last_game
exit
scorekeeper.last_game
exit
scorekeeper.last_game
exit
scorekeeper.last_game
scorekeeper
game_move
scorekeeper
exit
player
game_move
results
exit
player.moves.min
player.moves.max
player.moves
player.has_moves?
c
player.has_moves?
exit
player.last_move
c
player.last_move
c
exit
player
player_last_move
c
player.last_move
player_last_move
c
GameEngine.determine_move(move: move_to_beat)
move_to_beat = player_last_move || random_move
GameEngine.determine_move(move: move_to_beat)
player_last_move
player
c
player
player_last_move
exit
player.last_move
c
exit
foo
foo[0] = "zoo"
foo
foo << "cat"
foo
foo.clear
foo = ["one"]
player_last_move
c
exit
results_msg[winner]
results_msg[:winner]
winner = results[:winner]
results_msg
results
exit
boo.keys.first
boo.keys
boo = { "r" => 1, "s" => 1 }
foo.keys.first
foo.keys
foo.key
foo
foo.size
foo.first
foo = Hash[player.moves.select { |k, v| v == most_played}]
Hash[player.moves.select { |k, v| v == most_played}]
most_played = player.moves.values.max
most_played = most_played = player.moves.values.max
